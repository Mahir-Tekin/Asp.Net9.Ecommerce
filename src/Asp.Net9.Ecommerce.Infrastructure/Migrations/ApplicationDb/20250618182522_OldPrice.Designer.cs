// <auto-generated />
using System;
using Asp.Net9.Ecommerce.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Asp.Net9.Ecommerce.Infrastructure.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618182522_OldPrice")]
    partial class OldPrice
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BasePrice");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("IsActive", "DeletedAt");

                    b.ToTable("Products", t =>
                        {
                            t.HasCheckConstraint("CK_Products_BasePrice", "BasePrice > 0");
                        });
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MinStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("OldPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TrackInventory")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("_price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("_stockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("StockQuantity");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProductId");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("DeletedAt IS NULL");

                    b.HasIndex("_stockQuantity");

                    b.HasIndex("IsActive", "DeletedAt");

                    b.HasIndex("ProductId", "IsActive");

                    b.ToTable("ProductVariants", t =>
                        {
                            t.HasCheckConstraint("CK_ProductVariants_MinStockThreshold", "MinStockThreshold >= 0");

                            t.HasCheckConstraint("CK_ProductVariants_Price", "Price IS NULL OR Price > 0");

                            t.HasCheckConstraint("CK_ProductVariants_StockQuantity", "StockQuantity >= 0");
                        });
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.VariantOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("VariationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Value");

                    b.HasIndex("VariationTypeId");

                    b.ToTable("VariantOptions");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.VariationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VariationTypes");
                });

            modelBuilder.Entity("ProductVariantVariantOption", b =>
                {
                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SelectedOptionsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVariantId", "SelectedOptionsId");

                    b.HasIndex("SelectedOptionsId");

                    b.ToTable("ProductVariantOptions", (string)null);
                });

            modelBuilder.Entity("ProductVariationType", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VariantTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "VariantTypesId");

                    b.HasIndex("VariantTypesId");

                    b.ToTable("ProductVariantTypes", (string)null);
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Category", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsMany("Asp.Net9.Ecommerce.Domain.Catalog.CategoryVariationType", "VariationTypes", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("bit");

                            b1.Property<Guid>("VariationTypeId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("CategoryId", "__synthesizedOrdinal");

                            b1.ToTable("Categories");

                            b1.ToJson("VariationTypes");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("ParentCategory");

                    b.Navigation("VariationTypes");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Product", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.ProductImage", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.ProductVariant", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.VariantOption", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.VariationType", "VariationType")
                        .WithMany("Options")
                        .HasForeignKey("VariationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VariationType");
                });

            modelBuilder.Entity("ProductVariantVariantOption", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.ProductVariant", null)
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.VariantOption", null)
                        .WithMany()
                        .HasForeignKey("SelectedOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVariationType", b =>
                {
                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Asp.Net9.Ecommerce.Domain.Catalog.VariationType", null)
                        .WithMany()
                        .HasForeignKey("VariantTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Asp.Net9.Ecommerce.Domain.Catalog.VariationType", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
